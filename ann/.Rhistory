# Check whether the variables follow a Gaussian distribution
ks.test(qty_res,"pnorm", mean = mean(qty_res), sd = sd(qty_res))
ks.test(mprice_res,"pnorm", mean = mean(mprice_res), sd = sd(mprice_res))
ks.test(rprice_res,"pnorm", mean = mean(rprice_res), sd = sd(rprice_res))
# Write the residuals to a csv file to build causal graphs using Tetrad software
residual_data <- cbind(qty_res, rprice_res, mprice_res)
write.csv(residual_data, file = tetrd_file_path, row.names = FALSE)
# PC Algorithm
suffStat =  list(C=cor(residual_data), n = nrow(residual_data))
pc_algo_res <- pc(suffStat, indepTest = gaussCItest, alpha = 0.1, labels = colnames(residual_data), skel.method = "original")
plot(pc_algo_res, main="PC Algorithm Output")
# LinGam Algorithm
lingam_algo_res <- lingam(residual_data)
show(lingam_algo_res)
plot.ts(qty)
plot.ts(rprice)
plot.ts(mprice)
summary(qty_adf)
summary(mprice_adf)
summary(rprice_adf)
plot(pc_algo_res, main="PC Algorithm Output")
show(lingam_algo_res)
lingam_algo_res <- lingam(residual_data, verbose = TRUE)
show(lingam_algo_res)
plot(lingam_algo_res)
plot(lingam_algo_res, main="LinGam Algorithm Output")
as(lingam_algo_res, "amat")
plotling <- as(lingam_algo_res, "amat")
plot(plotling)
plot(plotling)
library(XBRL)
library(devtools)
xbrl_url2014 <- "https://www.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xml"
mmdf <- "https://www.sec.gov/Archives/edgar/data/1318605/000156459017003118/tsla-20161231.xml"
old_o <- options(stringsAsFactors = FALSE)
xbrl_data_aapl2014 <- xbrlDoAll(mmdf)
library(XBRL)
library(devtools)
xbrl_url2014 <- "https://www.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xml"
mmdf <- "https://www.sec.gov/Archives/edgar/data/1318605/000156459017003118/tsla-20161231.xml"
asd <-  "https://www.sec.gov/Archives/edgar/data/1318605/000156459017003118/tsla-20161231.xsd"
old_o <- options(stringsAsFactors = FALSE)
xbrl_data_aapl2014 <- xbrlDoAll(asd)
xbrl_data_aapl2014 <- xbrlDoAll(xbrl_url2014)
xbrl_data_aapl2014 <- xbrlDoAll(asd)
options(old_o)
library(finstr)
st2013 <- xbrl_get_statements(xbrl_data_aapl2014)
st2013
balance_sheet2013 <- st2013$StatementOfFinancialPositionClassified
balance_sheet2013
income2013 <- st2013$StatementOfIncome
income2013
check <- check_statement(balance_sheet2014)
check <- check_statement(balance_sheet2013)
check
library(XBRL)
library(finstr)
xbrl_url2014 <- "https://www.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xml"
xbrl_url2016 <-  "https://www.sec.gov/Archives/edgar/data/1318605/000156459017003118/tsla-20161231.xsd"
old_o <- options(stringsAsFactors = FALSE)
xbrl_data_tesla2016 <- xbrlDoAll(xbrl_url2016)
options(old_o)
st2016 <- xbrl_get_statements(xbrl_data_tesla2016)
xbrl_data_tesla2016 <- xbrlDoAll(xbrl_url2016)
xbrl_data_aapl2014 <- xbrlDoAll(xbrl_url2014)
st2014 <- xbrl_get_statements(xbrl_data_aapl2014)
balance_sheet2014 <- st2014$StatementOfFinancialPositionClassified
income2014 <- st2014$StatementOfIncome
check <- check_statement(balance_sheet2014)
st2014
balance_sheet2014
income2014
income2014$NetIncomeLoss
4.1733e+10
income2014$GrossProfit
gm_url2016 <- "https://www.sec.gov/Archives/edgar/data/1467858/000146785817000028/gm-20161231.xsd"
old_o <- options(stringsAsFactors = FALSE)
xbrl_data_tesla2016 <- xbrlDoAll(xbrl_url2016)
data_gm2016 <- xbrlDoAll(gm_url2016)
gm_url2016 <- "https://www.sec.gov/Archives/edgar/data/1467858/000146785817000028/gm-20161231.xml"
old_o <- options(stringsAsFactors = FALSE)
xbrl_data_tesla2016 <- xbrlDoAll(xbrl_url2016)
data_gm2016 <- xbrlDoAll(gm_url2016)
options(old_o)
st_gm_2016 <- xbrl_get_statements(data_gm2016)
xbrl_data_aapl2014 <- xbrlDoAll(xbrl_url2014)
st2014 <- xbrl_get_statements(xbrl_data_aapl2014)
balance_sheet2014 <- st2014$StatementOfFinancialPositionClassified
income2014 <- st2014$StatementOfIncome
check <- check_statement(balance_sheet2014)
gm_url2016 <- "https://www.sec.gov/Archives/edgar/data/1467858/000146785817000028/gm-20161231.xml"
old_o <- options(stringsAsFactors = FALSE)
xbrl_data_tesla2016 <- xbrlDoAll(xbrl_url2016)
data_gm2016 <- xbrlDoAll(gm_url2016)
options(old_o)
st_gm_2016 <- xbrl_get_statements(data_gm2016)
xbrl_data_gm2016 <- xbrlDoAll(gm_url2016)
xbrl_url2014 <- "https://www.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xsd"
xbrl_data_aapl2014 <- xbrlDoAll(xbrl_url2014)
st2014 <- xbrl_get_statements(xbrl_data_aapl2014)
balance_sheet2014 <- st2014$StatementOfFinancialPositionClassified
income2014 <- st2014$StatementOfIncome
check <- check_statement(balance_sheet2014)
st2014
xbrl_data_gm2016 <- xbrlDoAll(gm_url2016)
st_gm_2016 <- xbrl_get_statements(xbrl_data_gm2016)
library(XBRL)
library(finstr)
xbrl_url2016 <-  "https://www.sec.gov/Archives/edgar/data/1318605/000156459017003118/tsla-20161231.xml"
old_o <- options(stringsAsFactors = FALSE)
xbrl_data_tesla2016 <- xbrlDoAll(xbrl_url2016)
xbrl_data_gm2016 <- xbrlDoAll(gm_url2016)
options(old_o)
xbrl_url2014 <- "https://www.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xml"
xbrl_data_aapl2014 <- xbrlDoAll(xbrl_url2014)
st2014 <- xbrl_get_statements(xbrl_data_aapl2014)
balance_sheet2014 <- st2014$StatementOfFinancialPositionClassified
income2014 <- st2014$StatementOfIncome
check <- check_statement(balance_sheet2014)
check
income2014$NetIncomeLoss
income2014$GrossProfit
income2014$IncomeTaxExpenseBenefit
xbrl_url2016 <-  "https://www.sec.gov/Archives/edgar/data/1318605/000156459017003118/tsla-20161231.xml"
xbrl_data_aapl2014 <- xbrlDoAll(xbrl_url2016)
xbrl_url2016 <-  "https://www.sec.gov/Archives/edgar/data/1318605/000156459017003118/tsla-20161231.xsd"
xbrl_data_aapl2014 <- xbrlDoAll(xbrl_url2016)
library(‘quantmod’)
install.packages('quantmod')
quantmod’
library(quantmod)
getSymbols(“AAPL”)
?getSymbols
getSymbols('AAPL)
chartSeries(AAPL, subset=’last 3 months’)
addBBands()
AAPL[‘2010-06-01::2010-06-26’]
head(as.xts(merge(ORCL,IBM)))
sdfd
.
/
`;
sd
fsdsd
''
/\
'_
getSymbols('AAPL')
chartSeries(AAPL, subset=’last 3 months’)
chartSeries(AAPL, subset='last 3 months')
addBBands()
AAPL[‘2010-06-01::2010-06-26’]
head(as.xts(merge(ORCL,IBM)))
getSymbols(c('ORCL','IBM'))
head(as.xts(merge(ORCL,IBM)))
chartSeries(ORCL~IBM, subset='last 3 months')
chartSeries(ORCL,IBM, subset='last 3 months')
chartSeries(ORCL, subset='last 3 months')
addBBands()
getSymbols('TSLA')
chartSeries(TSLA, subset='last 3 months')
addBBands()
library(XBRL)
library(finstr)
xbrl_aapl_url2014 <- "https://www.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xml"
xbrl_tsla_url2016 <-  "https://www.sec.gov/Archives/edgar/data/1318605/000156459017003118/tsla-20161231.xml"
gm_url2016 <- "https://www.sec.gov/Archives/edgar/data/1467858/000146785817000028/gm-20161231.xsd"
old_o <- options(stringsAsFactors = FALSE)
xbrl_data_tesla2016 <- xbrlDoAll(xbrl_tsla_url2016)
xbrl_aapl_url2014 <- "https://www.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xml"
xbrl_data_tesla2016 <- xbrlDoAll(xbrl_aapl_url2016)
xbrl_data_tesla2016 <- xbrlDoAll(xbrl_aapl_url2014)
xbrl_aapl_url2014 <- "https://www.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xml"
xbrl_tsla_url2016 <-  "https://www.sec.gov/Archives/edgar/data/1318605/000156459017003118/tsla-20161231.xml"
gm_url2016 <- "https://www.sec.gov/Archives/edgar/data/1467858/000146785817000028/gm-20161231.xsd"
old_o <- options(stringsAsFactors = FALSE)
xbrl_data_tesla2016 <- xbrlDoAll(xbrl_aapl_url2014)
library(XBRL)
library(finstr)
xbrl_aaplurl2014 <- "https://www.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xml"
old_o <- options(stringsAsFactors = FALSE)
xbrl_data_tesla2016 <- xbrlDoAll(xbrl_aaplurl2014)
install.packages('edgar')
library(edgar)
getFilingInfo('TSLA', 2015)
daily.filing.info <- getDailyMaster('08/09/2016')
daily.filing.info
info <- getFilingInfo('United Technologies', 1994)
report <- getFilings(1994, 100030, 'ALL')
library(XBRL)
library(finstr)
xbrl_aaplurl2014 <- "https://www.sec.gov/Archives/edgar/data/320193/000119312514383437/aapl-20140927.xml"
xbrl_tsla_url2016 <-  "https://www.sec.gov/Archives/edgar/data/1318605/000156459017003118/tsla-20161231.xml"
gm_url2016 <- "https://www.sec.gov/Archives/edgar/data/1467858/000146785817000028/gm-20161231.xsd"
old_o <- options(stringsAsFactors = FALSE)
xbrl_data_tesla2016 <- xbrlDoAll(xbrl_aaplurl2014)
xbrl_data_gm2016 <- xbrlDoAll(gm_url2016)
options(old_o)
st2016 <- xbrl_get_statements(xbrl_data_tesla2016)
balance_sheet2016 <- st2016$StatementOfFinancialPositionClassified
income2016 <- st2016$StatementOfIncome
check <- check_statement(balance_sheet2016)
st_gm_2016 <- xbrl_get_statements(xbrl_data_gm2016)
xbrl_data_aapl2014 <- xbrlDoAll(xbrl_url2014)
xbrl_data_aapl2014 <- xbrlDoAll(xbrl_url2016)
st2014 <- xbrl_get_statements(xbrl_data_aapl2014)
balance_sheet2014 <- st2014$StatementOfFinancialPositionClassified
income2014 <- st2014$StatementOfIncome
install.packages("finreportr")
devtools::install_github("sewardlee337/finreportr")
CompanyInfo("GOOG")
library(finreportr)
CompanyInfo("GOOG")
AnnualReports("GOOG", foreign = FALSE)
GetIncome("TSLA", 2014)
GetIncome("GOOG", 2014)
head(GetIncome("GOOG", 2016), 20)
head(GetBalanceSheet("GOOG", 2016), 20)
getOption("download.file.method")
head(GetIncome("GOOG", 2016))
options(download.file.method = "internal")
head(GetIncome("GOOG", 2016))
options(download.file.method = "auto")
head(GetIncome("GOOG", 2016))
options(download.file.method = "curl")
head(GetIncome("GOOG", 2016))
head(GetBalanceSheet("GOOG", 2016), 20)
balanceSheet <- GetBalanceSheet("GOOG", 2016)
balanceSheet
balanceSheet$Amount
head(balanceSheet)
head(balanceSheet, 20)
balanceSheet <- head(GetBalanceSheet("GOOG", 2016), 20)
AnnualReports("GOOG")
GetIncome("GOOG", 20016)
GetIncome("GOOG", 2016)
cashFlow <- GetCashFlow("TSLA", 2016)
cashFlow
cashFlow$Metric
s <- 0
if ( cashFlow$Metric == "Net Income Loss"){
s = s + cashFlow$Amount
}
typeof(cashFlow$Amount[1])
s <- 0
if ( cashFlow$Metric == "Net Income Loss"){
s = s + as.integer(cashFlow$Amount)
}
s
cashFlow$Metric
library(XBRL)
library(finstr)
library(quantmod)
getSymbols("HMC")
getSymbols("DJIA",src="FRED")
getFinancials("DJIA")
getFinancials(DJIA.A)
getFinancials(DJIA.TS)
getFinancials(DJIA.T)
getFinancials(DJIA.S)
JAVA <- getFinancials('JAVA')
download.file(paste(google.fin, 'JAVA', sep=""))
download.file(paste(google.fin, 'JAVA', sep=""), 'asdad')
?download.file
download.file(http://finance.google.com/finance?fstype=ii&q=JAVA, 'asdad')
download.file("http://finance.google.com/finance?fstype=ii&q=JAVA", 'asdad')
download.file(url = "http://finance.google.com/finance?fstype=ii&q=JAVA", destfile = 'asdad', method = 'curl')
library("finreportr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
options(download.file.method = "curl")
g <- head(GetIncome("TSLA", 2017), 20)
g <- GetIncome("TSLA", 2016)
CompanyInfo("GOOG")
CompanyInfo("GOOG")
CompanyInfo("CPST")
CompanyInfo("ZAAP")
CompanyInfo("TM")
CompanyInfo("UQM")
CompanyInfo("KNDI")
CompanyInfo("PPO")
CompanyInfo("F")
CompanyInfo("PLUG")
CompanyInfo("JCI")
CompanyInfo("DAI")
CompanyInfo("MGA")
CompanyInfo("AONE")
CompanyInfo("ABAT")
CompanyInfo("ALTI")
CompanyInfo("CBAK")
CompanyInfo("SQM")
CompanyInfo("HEV")
CompanyInfo("QTWW")
CompanyInfo("VLNC")
CompanyInfo("CCG")
CompanyInfo("CCGI")
CompanyInfo("EVSI")
CompanyInfo("AVAV")
AnnualReports("AVAV")
cashFlow
View(AAPL)
AAPL
AAPL.Open
AAPL$AAPL.Open
min(AAPL$AAPL.LOW)
min(AAPL$AAPL.Low)
max(AAPL$AAPL.High)
View(DJIA)
library(XBRL)
library(finstr)
library(quantmod)
library(fma)
library(Quandl)
library(finreportr)
options(download.file.method = "curl")
GetIncome("TSLA", 2017)
GetIncome("AAPL", 2017)
options(download.file.method = "wget")
GetIncome("AAPL", 2017)
options(download.file.method = "internal")
GetIncome("AAPL", 2017)
options(download.file.method = "auto")
GetIncome("AAPL", 2017)
library(quantmod)
getFX(c("gold","XPD"))
getMetals(c('gold'))
getSymbols("GOLD/USD",src="Oanda")
XPT
getSymbols("XPT/USD",src="Oanda")
getMetals(Metals = 'gold', base.currency = 'USD', from = '2013-10-10')
getMetals(Metals = 'gold', base.currency = 'USD')
getMetals(Metals = 'gold', base.currency = 'USD', from = as.Date('2013-10-10'))
require(neuralnet)
library(boot)
library(plyr)
library(MASS)
bxplt <- function(metrics) {
dframe <- data.frame(X1 = metrics)
boxplot(dframe)
}
removeOutliers.fun <- function(dataset) {
apply(dataset,2,function(x) sum(is.na(x)))
FileData <- dataset
maxs <- apply(FileData, 2, max)
mins <- apply(FileData, 2, min)
result <- data.matrix(as.data.frame(scale(FileData, center = mins, scale = maxs - mins)))
FileData <- data.frame(FileData)
FileData <- result
return(FileData)
}
setwd('/Users/ADITYA/data/NCState/iot/project/ann')
dataset <- read.csv("BHARDWAJ ADITYA.csv", header = TRUE)
datasetNew <- removeOutliers.fun(dataset)
dataset1 <- datasetNew[1:500,]
dataset2 <- datasetNew[501:1000,]
dataset3 <- datasetNew[1001:1500,]
dataset4 <- datasetNew[1501:2000,]
dataset5 <- datasetNew[2001:2500,]
dataset6 <- datasetNew[2501:3000,]
dataset7 <- datasetNew[3001:3500,]
dataset8 <- datasetNew[3501:4000,]
dataset9 <- datasetNew[4001:4500,]
dataset10 <- datasetNew[4501:5000,]
mse <- list()
rmse <- list()
sse <- list()
r2 <- list()
yHat <- list()
set.seed(200)
calcVals <- function(testingData, predictedData, number) {
mse.NNet <- mean((testingData - predictedData)^2)
rmse.NNet <- sqrt(mse.NNet)
sse.NNet <- sum((testingData - predictedData)^2)
R2 <- 1 - (sum((testingData - predictedData )^2)/sum((testingData - mean(testingData))^2))
y_yHat <- sum(testingData - predictedData)
myret <- c(paste("MSE:",mse.NNet, sep = " "), paste("SSE:", sse.NNet, sep = " "), paste("RMSE:", rmse.NNet, sep = " "), paste("R^2:", R2, sep = " "), paste("Error:", y_yHat, sep = " "))
return(myret)
}
neural.fun <- function(training, testing, layer, number) {
#NN <- neuralnet(V6 ~ V1 + V2 + V3 + V4 + V5 , trainData, hidden = 1 , linear.output = T )
#NN <- neuralnet(Y ~ X1 + X2 + X3 + X4 + X5, training, hidden = layer, lifesign = "minimal", linear.output = FALSE, threshold = 0.2)
NN <- neuralnet(Y ~ X1 + X2 + X3 + X4 + X5, data  = training, hidden = layer,stepmax=1e6)
plot(NN, rep = "best")
#plot(NN)
results <- compute(NN, testing[,1:5])
prob <- results$net.result * ( max(dataset$Y) - min(dataset$Y) ) + min(dataset$Y)
testData_new <- (testing$Y) * ( max(dataset$Y) - min(dataset$Y) ) + min(dataset$Y)
calcVals(testData_new, prob, number)
}
checking.fun <- function(layers) {
mylist <- list()
for (i in 1:10){
if (i == 1) {
trainData <- rbind(dataset2, dataset3, dataset4, dataset5, dataset6, dataset7, dataset8, dataset9, dataset10)
testData <- data.frame(dataset1)
retval <- neural.fun(trainData, testData, layers, i)
print(retval)
}
if (i == 2) {
trainData <- rbind(dataset1, dataset3, dataset4, dataset5, dataset6, dataset7, dataset8, dataset9, dataset10)
testData <- data.frame(dataset2)
retval <- neural.fun(trainData, testData, layers, i)
print(retval)
}
if (i == 3) {
trainData <- rbind(dataset1, dataset2, dataset4, dataset5, dataset6, dataset7, dataset8, dataset9, dataset10)
testData <- data.frame(dataset3)
retval <- neural.fun(trainData, testData, layers, i)
print(retval)
}
if (i == 4) {
trainData <- rbind(dataset1, dataset2, dataset3, dataset5, dataset6, dataset7, dataset8, dataset9, dataset10)
testData <- data.frame(dataset4)
retval <- neural.fun(trainData, testData, layers, i)
print(retval)
}
if (i == 5) {
trainData <- rbind(dataset1, dataset2, dataset3, dataset4, dataset6, dataset7, dataset8, dataset9, dataset10)
testData <- data.frame(dataset5)
retval <- neural.fun(trainData, testData, layers, i)
print(retval)
}
if (i == 6) {
trainData <- rbind(dataset1, dataset2, dataset3, dataset4, dataset5, dataset7, dataset8, dataset9, dataset10)
testData <- data.frame(dataset6)
retval <- neural.fun(trainData, testData, layers, i)
print(retval)
}
if (i == 7) {
trainData <- rbind(dataset1, dataset2, dataset3, dataset4, dataset5, dataset6, dataset8, dataset9, dataset10)
testData <- data.frame(dataset7)
retval <- neural.fun(trainData, testData, layers, i)
print(retval)
}
if (i == 8) {
trainData <- rbind(dataset1, dataset2, dataset3, dataset4, dataset5, dataset6, dataset7, dataset9, dataset10)
testData <- data.frame(dataset8)
retval <- neural.fun(trainData, testData, layers, i)
print(retval)
}
if (i == 9) {
trainData <- rbind(dataset1, dataset2, dataset3, dataset4, dataset5, dataset6, dataset7, dataset8, dataset10)
testData <- data.frame(dataset9)
retval <- neural.fun(trainData, testData, layers, i)
print(retval)
}
if (i == 10) {
trainData <- rbind(dataset1, dataset2, dataset3, dataset4, dataset5, dataset6, dataset7, dataset8, dataset9)
testData <- data.frame(dataset10)
retval <- neural.fun(trainData, testData, layers, i)
print(retval)
}
}
}
multivariate.fun <- function(dataset) {
dataset <- data.frame(dataset)
multivariate.mod <- lm(dataset$Y ~ dataset$X1+dataset$X2+dataset$X3+dataset$X4+dataset$X5, data = dataset)
#print(multivariate.mod)
res <- resid(multivariate.mod)
fit <- fitted(multivariate.mod)
print(summary(multivariate.mod))
error <- dataset$Y - fit
MSE <- mean(error^2)
RMSE <- sqrt(MSE)
SSE <- sum(error^2)
print(paste("RMSE:", RMSE, sep = " "))
print(paste("MSE:", MSE, sep = " "))
print(paste("SSE:", SSE, sep = " "))
#qqnorm(res)
#qqline(res, col = 'red')
#hist(res, main="Histogram of Residual Analysis")
#plot(multivariate.mod)
}
multivariate.fun(datasetNew)
multivariate.fun <- function(dataset) {
dataset <- dataset
multivariate.mod <- lm(dataset$Y ~ dataset$X1+dataset$X2+dataset$X3+dataset$X4+dataset$X5, data = dataset)
#print(multivariate.mod)
res <- resid(multivariate.mod)
fit <- fitted(multivariate.mod)
print(summary(multivariate.mod))
error <- dataset$Y - fit
MSE <- mean(error^2)
RMSE <- sqrt(MSE)
SSE <- sum(error^2)
print(paste("RMSE:", RMSE, sep = " "))
print(paste("MSE:", MSE, sep = " "))
print(paste("SSE:", SSE, sep = " "))
#qqnorm(res)
#qqline(res, col = 'red')
#hist(res, main="Histogram of Residual Analysis")
#plot(multivariate.mod)
}
multivariate.fun(dataset)
multivariate.fun <- function(dataset) {
multivariate.mod <- lm(dataset$Y ~ dataset$X1+dataset$X4+dataset$X5, data = dataset)
#print(multivariate.mod)
res <- resid(multivariate.mod)
fit <- fitted(multivariate.mod)
print(summary(multivariate.mod))
error <- dataset$Y - fit
MSE <- mean(error^2)
RMSE <- sqrt(MSE)
SSE <- sum(error^2)
print(paste("RMSE:", RMSE, sep = " "))
print(paste("MSE:", MSE, sep = " "))
print(paste("SSE:", SSE, sep = " "))
#qqnorm(res)
#qqline(res, col = 'red')
#hist(res, main="Histogram of Residual Analysis")
#plot(multivariate.mod)
}
multivariate.fun(dataset)
